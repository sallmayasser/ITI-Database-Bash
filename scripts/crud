#!/bin/bash
########################################################################################

# helper functions:
###################

# $1: Metadata temp file
# $2: unique, notnull
restriction() {
    clear
    awk -F ":" '{print $2}' "$1" | nl -w 1 -s ") "
    counter="$colNum"
    while [[ $counter -gt 0 ]]; do
        echo
        clear_buffer
        read -p "Enter the column number for the $2 key, or 0 to finish: " key

        if is_int "$key"; then
            [[ $key -eq 0 ]] && break
            if [[ $key -gt 0 ]] && [[ $key -le $colNum ]]; then
                if [[ $key -eq $pk ]]; then
                    echo "'$pk_name' is already $2 as it is the primary key."
                elif $(awk -v key="$key" -v condition="$2" -F ":" 'NR==key {if ($4==condition || $5==condition) exit 0; exit 1}' "$1"); then
                    key_name=$(awk -v key="$key" -F ":" 'NR==key {print $2}' "$1")
                    echo "'$key_name' is already $2."
                else
                    sed -i "${key}s/$/:$2/" "$1"
                    ((counter--))
                fi
                continue
            fi
        fi
        echo "Invalid input. Please enter a valid column number between 1 and $colNum, or 0 to finish."
    done
}

# $1: Metadata temp file
key_init() {
    rm -f "$1"
    for ((i = 0; i < $colNum; i++)); do
        line="key"
        echo

        clear_buffer
        read -p "Please enter column $(($i + 1)) Name: " colName && colName=$(trim_tolower "$colName")
        [[ -z "$colName" ]] && {
            echo "Column name cannot be whitespace"
            ((i--))
            continue
        }
        line+=":$colName"

        clear_buffer
        read -p "Please enter column $(($i + 1)) Data Type (int/str/email/phone): " colType && colType=$(trim_tolower "$colType")
        [[ -z "$colType" ]] && {
            echo "Data Type cannot be whitespace"
            ((i--))
            continue
        }
        is_type "$colType" && line+=":$colType" || {
            echo "Data Type must be 'int' or 'str'"
            ((i--))
            continue
        }

        echo "$line" >>"$1"
    done
}

write_headers() {
    local meta_file="$1"
    local table_file="$2"

    # Generate headers
    header=$(awk -F ':' '/^key:/ {print $2}' "$meta_file" | paste -sd ":" -)

    # Write headers to the DB file
    echo "$header" >"$table_file"
}

validate_input() {
    local field="$1"
    local type="$2"
    local constraints="$3"
    local msg="$4"

    # Find column index from the header of the table file
    col_index=$(awk -F ":" -v field="$field" '
        NR==1 {
            for (i=1; i<=NF; i++) {
                if ($i == field) {
                    print i;
                    exit;
                }
            }
        }' "$table_file")

    if [[ -z "$col_index" ]]; then
        echo "❌ Error: Column '$field' not found in the table."
        return 1
    fi

    while :; do
        echo
        clear_buffer
        read -p "$msg" value
        value=$(trim_tolower "$value")
        [[ "$value" == "N/A" ]] && value=""

        # Check PK constraint (must be unique and not null)
        [[ "$constraints" == *"pk"* ]] && {
            [[ -z "$value" ]] && echo "Error: $field (Primary Key) cannot be empty!" && continue
            if [[ "$constraints" == *"unique"* ]]; then
                if awk -F ":" -v col="$col_index" -v val="$value" 'NR > 1 && $col == val {exit 1}' "$table_file"; then
                    echo "Error: $field (Primary Key) must be unique!"
                    continue
                fi
            fi
        }

        # Check NOT NULL constraint
        [[ "$constraints" == *"notnull"* && -z "$value" ]] && echo "Error: $field cannot be empty." && continue

        # Check UNIQUE constraint (if not a PK)
        if [[ "$constraints" == *"unique"* ]]; then
            if ! awk -F ":" -v col="$col_index" -v val="$value" '
                NR > 1 {
                    if ($col == val) {
                        exit 1;
                    }
                }' "$table_file"; then
                echo " Error: This $field already exists. Please enter a different value."
                continue

            fi
        fi

        if [[ -n "$value" ]]; then
            case "$type" in
            "str")
                if ! is_str "$value"; then
                    echo "Error: $field must start with letter."
                    continue
                fi
                ;;
            "int")
                if ! is_int "$value"; then
                    echo "Error: $field must be an integer."
                    continue
                fi
                ;;
            "email")
                if ! is_email "$value"; then
                    echo "Error: Invalid email format you must enter in this format: 'john@example.com'"
                    continue
                fi
                ;;
            "phone")
                if ! is_phone "$value"; then
                    echo "Error: Invalid phone format. Must be egyption number 'ex: 010-xxx-xxx-xx' digits."
                    continue
                fi
                ;;
            *)
                echo "Error: Unknown type $type for $field."
                continue
                ;;
            esac
        fi

        # Assign reply value
        [[ -n "$value" ]] && reply="$value" || reply="N/A"
        return 0
    done
}

########################################################################################

# $1: Database Path
# $2: Table to be created
table_init() {
    clear
    while true; do
        clear_buffer
        read -p "Please enter number of columns: " colNum
        [[ -z "$colNum" ]] && {
            echo -e "Number of columns cannot be whitespace\n"
            continue
        }
        is_int "$colNum" && [[ $colNum -gt 0 ]] && break
        echo -e "Number of columns must be a positive integer\n"
    done

    key_init "$1/.$2.temp"
    clear
    awk -F ":" '{print $2}' "$1/.$2.temp" | nl -w 1 -s ") "
    while true; do
        echo
        clear_buffer
        read -p "Enter the column number for the primary key, or 0 for auto-generated ID: " pk
        is_int "$pk" && [[ $key -ge 0 ]] && [[ $key -le $colNum ]] && break
        echo "Invalid input. Please enter a valid column number between 1 and $colNum, or 0 for auto-generated ID."
    done

    [[ $pk -eq 0 ]] && pk_name="ID" || pk_name=$(awk -v pk="$pk" -F ":" 'NR==pk {print $2}' "$1/.$2.temp")
    if [[ $colNum -ne 1 ]] || [[ $pk -eq 0 ]]; then
        restriction "$1/.$2.temp" "unique"
        restriction "$1/.$2.temp" "notnull"
    fi
    [[ $pk -eq 0 ]] && {
        sed -i "1s/^/key:ID:auto\n/" "$1/.$2.temp"
        ((colNum++))
    } || sed -i "${pk}s/$/:pk/" "$1/.$2.temp"

    clear
    echo -e "Table info:\n"
    # friendlier format
    cat "$1/.$2.temp"
    echo
    clear_buffer
    read -n 1 -p "Press [y/Y] to confirm initialization and any other key to cancel: " confirm
    [[ $confirm != [yY] ]] && {
        echo -e "\ninitialization canceled"
        sleep 2
        return 1
    }

    echo "updated_at:$(date)" >>"$1/.$2"
    echo "columns:$colNum" >>"$1/.$2"
    echo "rows:0" >>"$1/.$2"
    echo "pk:$pk_name:$pk" >>"$1/.$2"
    cat "$1/.$2.temp" >>"$1/.$2"
    rm "$1/.$2.temp"

    write_headers "$1/.$2" "$1/$2"
    echo -e "\nTable initialized succussfully"
    sleep 2
    crud_menu "$1/.$2" "$1/$2"
}

# $1: Table Metadata File
# $2: Table Data File
crud_menu() {
    rows_md=$(awk -F ":" '/^rows:/ {print NR}' "$1")
    row_num=$(awk -F':' -v rows_md="$rows_md" 'NR==rows_md {print $NF}' "$1")
    pk_md=$(awk -F ":" '/^pk:/ {print NR}' "$1")
    updated_at_md=$(awk -F ":" '/^updated_at:/ {print NR}' "$1")

    while true; do
        clear
        echo "Select what you want to do in table :"
        echo "1) Insert Record"
        echo "2) Delete Record"
        echo "3) Update Record"
        echo "4) Select Record"
        echo "5) Show All Records"
        echo "6) Exit"

        clear_buffer
        read -s -n 1 choice

        case "$choice" in
        1) insert_record "$1" "$2" ;;
        2) delete_record "$1" "$2" ;;
        3) update_record "$1" "$2" ;;
        4)
            find_record "$2"
            clear_buffer
            read -s -n 1 -p "Press any key to continue..."
            ;;
        5)
            show_all_records "$2"
            clear_buffer
            read -s -n 1 -p "Press any key to continue..."
            ;;
        6) return 0 ;;
        *)
            echo "Invalid choice, please try again."
            sleep 2
            ;;
        esac

    done
}

# $1: Database Path
# $2: Table to be created
select_table() {
    [[ -s "$1/$2" ]] && crud_menu "$1/.$2" "$1/$2" || table_init "$1" "$2"
}

insert_record() {
    local meta_file="$1"
    local table_file="$2"

    clear
    echo "Welcome to the record insertion wizard!"
    echo "*****************************************"

    declare -A field rules
    column_order=()

    while IFS=: read -r key name type constraints; do
        if [[ "$key" == "key" ]]; then
            field["$name"]="$type"
            rules["$name"]="$constraints"
            column_order+=("$name")
        fi
    done < <(grep '^key:' "$meta_file")

    new_row=""

    if [[ "${field["ID"]}" == "auto" ]]; then
        last_id=$(awk -F':' -v pk_md=$pk_md 'NR==pk_md {print $NF}' "$meta_file")
        new_id=$((last_id + 1))
        new_row="$new_id:"
        attributes=("${column_order[@]:1}")
    else
        attributes=("${column_order[@]}")
    fi

    for attr in "${attributes[@]}"; do
        type="${field[$attr]}"
        constraints="${rules[$attr]}"
        validate_input "$attr" "$type" "$constraints" "Enter $attr value (press enter for null value): "
        new_row+="$reply:"
    done

    echo "$new_row" >>"$table_file"

    #  increment the last_id i  meta data file
    if [[ "${field["ID"]}" == "auto" ]]; then
        sed -i "${pk_md}s/^pk:ID:[0-9]*/pk:ID:$new_id/" "$meta_file"
    fi
    sed -i "${rows_md}s/rows:[0-9]*/rows:$((++row_num))/" "$meta_file"
    sed -i "${updated_at_md}s/updated_at:.*/updated_at:$(date)/" "$meta_file"

    echo "Row inserted successfully!"
}

delete_record() {
    local meta_file="$1"
    local table_file="$2"

    clear
    echo "Welcome to the record deletion wizard!"
    echo "*****************************************"

    find_record "$table_file"
    [[ $? -ne 0 ]] && return 1

    echo "*****************************************"
    clear_buffer
    read -n 1 -p "Are you sure you want to delete $matching_count record(s)? (y/n) " confirmation
    [[ "$confirmation" != [Yy] ]] && {
        echo -e "\nDeletion cancelled."
        sleep 2
        return 1
    }

    awk -F ':' -v idx="$key_index" -v val="$value" '
    BEGIN { OFS = ":" }
    $idx != val { print }
    ' "$table_file" >temp_file && mv temp_file "$table_file"

    row_num=$(($row_num - $matching_count))
    sed -i "${rows_md}s/rows:[0-9]*/rows:$row_num/" "$meta_file"
    sed -i "${updated_at_md}s/updated_at:.*/updated_at:$(date)/" "$meta_file"

    echo "Record(s) deleted successfully!"
    sleep 2
}
# $1: Table Data File
columns_menu() {
    local table_file="$1"

    # Read the header
    IFS=':' read -r -a headers <"$table_file"

    echo "Select a column:"
    for i in "${!headers[@]}"; do
        echo "$((i + 1))- ${headers[i]}"
    done

    read -p "Enter column number: " choice

    if [[ "$choice" =~ ^[0-9]+$ && "$choice" -ge 1 && "$choice" -le "${#headers[@]}" ]]; then
        echo "${headers[$((choice - 1))]}" # Only print the selected column name
    else
        echo "Invalid choice!" >&2
        return 1
    fi
}

# $1: Table Data File
find_record() {
    local table_file="$1"

    clear
    echo "Welcome to the Find wizard!"
    echo "*****************************************"
    clear_buffer

    IFS=':' read -r -a headers <"$table_file"
    echo "Select a column from the menu:"
    for i in "${!headers[@]}"; do
        echo "$((i + 1))) ${headers[i]}"
    done
    read -p "Enter column number: " choice
    if [[ "$choice" =~ ^[0-9]+$ && "$choice" -ge 1 && "$choice" -le "${#headers[@]}" ]]; then
        key="${headers[$((choice - 1))]}"
    else
        echo "Invalid choice!"
        sleep 2
        return 1
    fi

    key_index=$(awk -F ':' -v key="$key" 'NR==1 {for (i=1; i<=NF; i++) if ($i == key) print i}' "$table_file")
    [[ -z "$key_index" ]] && {
        echo "Error: Column '$key' not found."
        sleep 2
        return 1
    }

    clear_buffer
    read -p "Enter the value: " value
    [[ -z "$value" ]] && {
        echo "Error: Value cannot be empty."
        sleep 2
        return 1
    } || [[ "$value" =~ ^(N/A|n/a|NA|na)$ ]] && value="N/A"

    # Make `matching_rec` and `matching_count` global
    escaped_value=$(echo "$value" | sed 's/[\/&]/\\&/g')
    matching_rec=$(sed -n "/^\([^:]*:\)\{$((key_index - 1))\}$escaped_value:/p" "$table_file")
    matching_count=$([[ -n "$matching_rec" ]] && echo "$matching_rec" | wc -l || echo 0)

    [[ "$matching_count" -eq 0 ]] && {
        echo "Error: No matching records found."
        sleep 2
        return 1
    }

    clear
    echo -e "\nMatching record(s):"
    echo "*****************************************"
    sed -n '1p' "$table_file" | column -t -s ':'
    echo "$matching_rec" | column -t -s ':'
}

update_record() {
    local meta_file="$1"
    local table_file="$2"

    clear
    echo "Welcome to the record/s updating wizard!"
    echo "*****************************************"

    IFS=':' read -r -a headers <"$table_file"
    echo "Select a column from the menu:"
    for i in "${!headers[@]}"; do
        echo "$((i + 1))) ${headers[i]}"
    done
    clear_buffer
    read -p "Enter column number: " choice
    if [[ "$choice" =~ ^[0-9]+$ && "$choice" -ge 1 && "$choice" -le "${#headers[@]}" ]]; then
        key="${headers[$((choice - 1))]}"
    else
        echo "Invalid choice!"
        sleep 2
        return 1
    fi

    [[ "$key" == "ID" ]] && {
        echo "Error: You cannot update the ID value."
        sleep 2
        return 1
    }

    # Find column index
    local key_index=$(awk -F ':' -v key="$key" 'NR==1 {for (i=1; i<=NF; i++) if ($i == key) print i}' "$table_file")
    [[ -z "$key_index" ]] && {
        echo "Error: Column '$key' not found."
        sleep 2
        return 1
    }

    clear_buffer
    read -p "Enter the value to update: " old_value
    [[ -z "$old_value" ]] && {
        echo "Error: Value cannot be empty."
        sleep 2
        return 1
    } || [[ "$old_value" =~ ^(N/A|n/a|NA|na)$ ]] && old_value="N/A"

    local matching_rec=$(awk -F ':' -v idx="$key_index" -v val="$old_value" 'NR>1 && $idx == val' "$table_file")

    local matching_count=$([[ -n "$matching_rec" ]] && echo "$matching_rec" | wc -l || echo 0)
    [[ "$matching_count" -eq 0 ]] && {
        echo "Error: No matching records found."
        sleep 2
        return 1
    }

    local field_type=$(awk -F ":" -v key="$key" '$2 == key {print $3}' "$meta_file")
    local field_constraints=$(awk -F ":" -v key="$key" '$2 == key {print $4}' "$meta_file")

    validate_input "$key" "$field_type" "$field_constraints" "Enter the new value (press enter for null value): "
    [[ $? -eq 0 ]] &&
        new_value="$reply"

    clear_buffer
    read -n 1 -p "Are you sure you want to update $matching_count record(s)? (y/n) " confirmation
    [[ "$confirmation" != [Yy] ]] && {
        echo -e "\nUpdating cancelled."
        sleep 2
        return 1
    }
    new_value=$(echo "$new_value" | sed 's/\\/\\\\/g')
    awk -F ':' -v idx="$key_index" -v old_val="$old_value" -v new_val="$new_value" '
       BEGIN {
        OFS = ":";
        }
       NR == 1 { print; next } 
       {
         if ($idx == old_val) {
             $idx = new_val
         }
         print
       }
    ' "$table_file" >temp_file && mv temp_file "$table_file"

    sed -i "/^updated_at:/s/.*/updated_at: $(date)/" "$meta_file"

    echo "Record(s) updated successfully!"
    sleep 2
}

show_all_records() {
    local table_file="$1"
    clear
    column -t -s ':' "$table_file"
}
