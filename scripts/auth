#!/bin/bash
########################################################################################

# helper functions:
###################

logout_func() {
    echo "logout at $(date)" >>"$logs_path/users/$user"
    mv "$logs_path/users/$user" "$logs_path/users/.$user"
    echo "Goodbye $user!"
    user="Guest"
}

# $1: 'user': user, 'group': group
login_func() {
    clear
    clear_buffer
    read -r -p "Please enter your $1 name: " name && name=$(trim_tolower "$name")
    [[ -z "$name" ]] && {
        echo -e "\nName cannot be whitespace."
        return 1
    }
    ! is_str "$name" && {
        echo -e "\nInvalid Name. The name must start with a letter and cannot contain ':' or '/'."
        return 1
    }
    if [[ $1 == 'group' ]]; then
        if awk -v user="$user" -F ':' '/^members/ {for (i = 2; i <= NF; i++) if ($i == user) exit 0; exit 1}' "$auth_path/groups/$name"; then
            echo -e "\nYou already are a member of the group '$name'."
            return 1
        fi
        name=".$name"
    fi

    clear_buffer
    read -r -s -p "Please enter your $1 password: " pass

    if [[ ! -e "$auth_path/users/$name" || -z "$pass" ]]; then
        echo -e "\nInvalid $1 name or password."
        return 1
    fi

    local user_data=$(grep "^pass:" "$auth_path/users/$name")
    local stored_salt=$(echo "$user_data" | cut -d ':' -f2)
    local stored_hash=$(echo "$user_data" | cut -d ':' -f3)
    local entered_hash=$(hash_password "$pass" "$stored_salt")

    if [[ ! -e "$auth_path/users/$name" || "$entered_hash" != "$stored_hash" ]]; then
        echo -e "\nInvalid $1 name or password."
        return 1
    fi

    unset pass
    if [[ $1 == 'user' ]]; then
        user="$name"
        if [[ -e "$logs_path/users/.$user" ]]; then
            mv "$logs_path/users/.$user" "$logs_path/users/$user"
            echo "login at $(date)" >>"$logs_path/users/$user"
            [[ $user == 'root' ]] && root_menu || user_menu
            return 0
        fi
        echo -e "\nuser is already logged in" && return 1
    elif [[ $1 == 'group' ]]; then
        members_md=$(awk '/^members/ {print NR}' "$auth_path/users/$name")
        sed -i "${members_md}s/$/:$user/" "$auth_path/users/$name"
        updated_at_md=$(awk '/^updated_at/ {print NR}' "$auth_path/users/$name")
        [[ -n $updated_at_md ]] && sed -i "${updated_at_md}s/updated_at:.*/updated_at:$(date)/" "$auth_path/users/$name" || echo "updated_at:$(date)" >>"$auth_path/users/$name"

        groups_md=$(awk '/^groups/ {print NR}' "$auth_path/users/$user")
        sed -i "${groups_md}s/$/:${name#.}/" "$auth_path/users/$user"
        updated_at_md=$(awk '/^updated_at/ {print NR}' "$auth_path/users/$user")
        [[ -n $updated_at_md ]] && sed -i "${updated_at_md}s/updated_at:.*/updated_at:$(date)/" "$auth_path/users/$user" || echo "updated_at:$(date)" >>"$auth_path/users/$user"

        echo "user '$user' join group '$name' at $(date)" >>"$logs_path/users/$user"
        echo "user '$user' join group '$name' at $(date)" >>"$logs_path/groups/$name"
        echo -e "\nYou have successfully joined the group '$name'."
        return 0
    fi
}

# $1: 'user': user, 'group': group
register_func() {
    clear
    clear_buffer
    read -r -p "Please enter your $1 name: " name && name=$(trim_tolower "$name")

    [[ -z "$name" ]] && {
        echo -e "\nName cannot be whitespace."
        return 1
    }
    [[ "$name" == 'guest' || "$name" == 'root' ]] && {
        echo -e "\nName cannot be '$name'."
        return 1
    }
    ! is_str "$name" && {
        echo -e "\nInvalid Name. The name must start with a letter and cannot contain ':' or '/'."
        return 1
    }
    [[ -e "$auth_path/users/$name" ]] && {
        echo -e "\nuser '$name' already exists."
        return 1
    }
    [[ -e "$auth_path/groups/$name" ]] && {
        echo -e "\ngroup '$name' already exists."
        return 1
    }

    clear_buffer
    read -r -s -p "Please enter your password: " pass1
    [[ -z "$pass1" ]] && {
        echo -e "\nPassword cannot be whitespace."
        return 1
    }
    echo
    clear_buffer
    read -r -s -p "Please enter your password again: " pass2
    echo

    [[ $pass1 != $pass2 ]] && echo -e "\nPasswords does not match. Registration Failed." && return 1

    local salt=$(openssl rand -base64 16)
    local hashed_password=$(hash_password "$pass1" "$salt")

    echo -e "\nRegistration Complete."
    if [[ $1 == 'user' ]]; then
        echo "username:$name" >>"$auth_path/users/$name"
        echo "pass:$salt:$hashed_password" >>"$auth_path/users/$name"
        echo "groups" >>"$auth_path/users/$name"
        echo "created_at:$(date)" >>"$auth_path/users/$name"
        echo "user '$name' created at $(date)" >>"$logs_path/users/.$name"
    elif [[ $1 == 'group' ]]; then
        echo "groupname:$name" >>"$auth_path/groups/$name"
        echo "pass:$salt:$hashed_password" >>"$auth_path/groups/$name"
        echo "owner:$user" >>"$auth_path/groups/$name"
        echo "members:$user" >>"$auth_path/groups/$name"
        echo "created_by:$user" >>"$auth_path/groups/$name"
        echo "user '$user' created group '$name' at $(date)" >>"$logs_path/groups/.$name"
        echo "user '$user' created group '$name' at $(date)" >>"$logs_path/users/$user"

        groups_md=$(awk '/^groups/ {print NR}' "$auth_path/users/$user")
        sed -i "${groups_md}s/$/:$name/" "$auth_path/users/$user"

        updated_at_md=$(awk '/^updated_at/ {print NR}' "$auth_path/users/$user")
        [[ -n $updated_at_md ]] && sed -i "${updated_at_md}s/updated_at:.*/updated_at:$(date)/" "$auth_path/users/$user"
        [[ -z $updated_at_md ]] && echo "updated_at:$(date)" >>"$auth_path/users/$user"
    fi

    unset pass1 pass2
    return 0
}

########################################################################################

mygroups() {
    clear
    echo -e "A menu where you can edit and remove your groups\n"
    awk -F ':' -v metadata="$auth_path/users/$user" '/^groups/ {for (i=2; i<=NF; i++) print $i}' metadata
    clear_buffer
    read -r -s -n 1 -p "Press any key to continue..."
    return 0
}

group_menu() {
    while true; do
        clear
        echo "Welcome $user"
        echo "1) Create Group"
        echo "2) Manage Group"
        echo "3) Join Group"
        echo "4) Back"

        clear_buffer
        read -r -s -n 1 choice
        clear

        case "$choice" in
        1)
            register_func "group"
            sleep 2
            ;;
        2)
            mygroups
            ;;
        3)
            login_func "group"
            sleep 2
            ;;
        4) return 0 ;;
        *)
            echo "Invalid choice, please try again."
            sleep 2
            ;;
        esac
    done
}

user_menu() {
    while true; do
        clear
        echo "Welcome $user"
        echo "1) DBMS"
        echo "2) Groups"
        echo "3) Logs"
        echo "4) Logout"
        echo "5) Exit"

        clear_buffer
        read -r -s -n 1 choice
        clear

        case "$choice" in
        1)
            db_menu
            logout_func
            return 0
            ;;
        2)
            group_menu
            ;;
        3)
            echo -e "Logs:\n####\n"
            cat "$logs_path/users/$user"
            echo
            clear_buffer
            read -r -s -n 1 -p "Press any key to continue..."
            ;;
        4)
            logout_func
            return 0
            ;;
        5)
            logout_func
            sleep 2
            exit 0
            ;;
        *)
            echo "Invalid choice, please try again."
            sleep 2
            ;;
        esac
    done
}

root_menu() {
    while true; do
        clear
        echo "Welcome root"
        echo "1) DBMS"
        echo "2) Groups"
        echo "3) Logs"
        echo "4) Logout"
        echo "5) Exit"

        clear_buffer
        read -r -s -n 1 choice
        clear

        case "$choice" in
        1)
            db_menu
            logout_func
            return 0
            ;;
        2)
            for group in "$auth_path"/.*; do
                [ -f "$group" ] && echo "$group"
            done
            echo
            clear_buffer
            read -r -s -n 1 -p "Press any key to continue..."
            ;;
        3)
            echo -e "Logs:\n####\n"
            for logs in "$logs_path"/* "$logs_path"/.*; do
                [ -f "$logs" ] && cat "$logs_path/$logs" && echo
            done
            clear_buffer
            read -r -s -n 1 -p "Press any key to continue..."
            ;;
        4)
            logout_func
            return 0
            ;;
        5)
            logout_func
            sleep 2
            exit 0
            ;;
        *)
            echo "Invalid choice, please try again."
            sleep 2
            ;;
        esac
    done
}

auth_menu() {
    user='Guest'
    while true; do
        clear
        echo "Welcome:"
        echo "1) Login"
        echo "2) Register"
        echo "3) Enter as a guest"
        echo "4) Exit"

        clear_buffer
        read -r -s -n 1 choice
        clear

        case "$choice" in
        1)
            login_func "user"
            sleep 2
            ;;
        2)
            register_func "user"
            sleep 2
            ;;
        3) db_menu ;;
        4)
            echo "Goodbye!"
            sleep 2
            exit 0
            ;;
        *)
            echo "Invalid choice, please try again."
            sleep 2
            ;;
        esac
    done
}
