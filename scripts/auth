#!/bin/bash
########################################################################################

# helper functions:
###################

# $1: 'user': user, 'group': group
login_func() {
    clear
    clear_buffer
    read -r -p "Please enter your $1 name: " name && name=$(trim_tolower "$name")
    [[ -z "$name" ]] && {
        echo -e "\nName cannot be whitespace."
        return 1
    }
    ! is_str "$name" && {
        echo -e "\nInvalid Name. The name must start with a letter and cannot contain ':' or '/'."
        return 1
    }
    if [[ $1 == 'group' ]]; then
        if awk -v user="$user" -F ':' '/^members/ {for (i = 2; i <= NF; i++) if ($i == user) exit 0; exit 1}' "$auth_path/.$name"; then
            echo -e "\nYou already are a member of the group '$name'."
            return 1
        fi
        name=".$name"
    fi

    clear_buffer
    read -r -s -p "Please enter your $1 password: " pass
    if [[ ! -e "$auth_path/$name" || -z "$pass" || "$pass" != "$(awk -F ':' 'NR==2 {print $2}' "$auth_path/$name")" ]]; then
        echo -e "\nInvalid $1 name or password."
        return 1
    fi

    if [[ $1 == 'user' ]]; then
        user="$name"
        [[ -e "$logs_path/.$user" ]] && user_menu && return 0
        echo -e "\nuser is already logged in" && return 1
    elif [[ $1 == 'group' ]]; then
        members_md=$(awk '/^members/ {print NR}' "$auth_path/$name")
        sed -i "${members_md}s/$/:$user/" "$auth_path/$name"
        updated_at_md=$(awk '/^updated_at/ {print NR}' "$auth_path/$name")
        [[ -n $updated_at_md ]] && sed -i "${updated_at_md}s/updated_at:.*/updated_at:$(date)/" "$auth_path/$name" || echo "updated_at:$(date)" >>"$auth_path/$name"

        groups_md=$(awk '/^groups/ {print NR}' "$auth_path/$user")
        sed -i "${groups_md}s/$/:${name#.}/" "$auth_path/$user"
        updated_at_md=$(awk '/^updated_at/ {print NR}' "$auth_path/$user")
        [[ -n $updated_at_md ]] && sed -i "${updated_at_md}s/updated_at:.*/updated_at:$(date)/" "$auth_path/$user" || echo "updated_at:$(date)" >>"$auth_path/$user"

        echo -e "\nYou have successfully joined the group '$name'."
        return 0
    fi
}

# $1: 'user': user, 'group': group
register_func() {
    clear
    clear_buffer
    read -r -p "Please enter your $1 name: " name && name=$(trim_tolower "$name")

    [[ -z "$name" ]] && {
        echo -e "\nName cannot be whitespace."
        return 1
    }
    [[ "$name" == 'guest' || "$name" == 'root' ]] && {
        echo -e "\nName cannot be '$name'."
        return 1
    }
    ! is_str "$name" && {
        echo -e "\nInvalid Name. The name must start with a letter and cannot contain ':' or '/'."
        return 1
    }
    [[ -e "$auth_path/$name" ]] && {
        echo -e "\nuser '$name' already exists."
        return 1
    }
    [[ -e "$auth_path/.$name" ]] && {
        echo -e "\ngroup '$name' already exists."
        return 1
    }

    clear_buffer
    read -r -s -p "Please enter your password: " pass1
    [[ -z "$pass1" ]] && {
        echo -e "\nPassword cannot be whitespace."
        return 1
    }
    echo
    clear_buffer
    read -r -s -p "Please enter your password again: " pass2
    echo

    [[ $pass1 != $pass2 ]] && echo -e "\nPasswords does not match. Registration Failed." && return 1

    echo -e "\nRegistration Complete."
    if [[ $1 == 'user' ]]; then
        echo "username:$name" >>"$auth_path/$name"
        echo "pass:$pass1" >>"$auth_path/$name"
        echo "groups" >>"$auth_path/$name"
        echo "created_at:$(date)" >>"$auth_path/$name"
        echo "created at $(date)" >>"$logs_path/.$name"
    elif [[ $1 == 'group' ]]; then
        echo "groupname:$name" >>"$auth_path/.$name"
        echo "pass:$pass1" >>"$auth_path/.$name"
        echo "owner:$user" >>"$auth_path/.$name"
        echo "members:$user" >>"$auth_path/.$name"
        echo "created_by:$user" >>"$auth_path/.$name"
        echo "created at $(date)" >>"$auth_path/.$name"

        groups_md=$(awk '/^groups/ {print NR}' "$auth_path/$user")
        sed -i "${groups_md}s/$/:$name/" "$auth_path/$user"

        updated_at_md=$(awk '/^updated_at/ {print NR}' "$auth_path/$user")
        [[ -n $updated_at_md ]] && sed -i "${updated_at_md}s/updated_at:.*/updated_at:$(date)/" "$auth_path/$user"
        [[ -z $updated_at_md ]] && echo "updated_at:$(date)" >>"$auth_path/$user"
    fi
    return 0
}

########################################################################################

mygroups() {
    echo -e "A menu where you can edit and remove your groups\n"
    clear_buffer
    read -r -s -n 1 -p "Press any key to continue..."
    return 0
}

group_menu() {
    while true; do
        clear
        echo "Welcome $user"
        echo "1) Create Group"
        echo "2) Manage Group"
        echo "3) Join Group"
        echo "4) Back"

        clear_buffer
        read -r -s -n 1 choice
        clear

        case "$choice" in
        1)
            register_func "group"
            sleep 2
            ;;
        2)
            mygroups
            ;;
        3)
            login_func "group"
            sleep 2
            ;;
        4) return 0 ;;
        *)
            echo "Invalid choice, please try again."
            sleep 2
            ;;
        esac
    done
}

user_menu() {
    mv "$logs_path/.$user" "$logs_path/$user"
    echo "login at $(date)" >>"$logs_path/$user"

    [[ $user == 'root' ]] && {
        db_menu
        return 0
    }

    while true; do
        clear
        echo "Welcome $user"
        echo "1) DBMS"
        echo "2) Groups"
        echo "3) Logout"
        echo "4) Exit"

        clear_buffer
        read -r -s -n 1 choice
        clear

        case "$choice" in
        1) db_menu ;;
        2)
            group_menu
            ;;
        3)
            echo "logout at $(date)" >>"$logs_path/$user"
            mv "$logs_path/$user" "$logs_path/.$user"
            echo "Goodbye $user!"
            user="Guest"
            return 0
            ;;
        4)
            echo "Goodbye $user!"
            sleep 2
            exit 0
            ;;
        *)
            echo "Invalid choice, please try again."
            sleep 2
            ;;
        esac

    done
}

auth_menu() {
    user='Guest'
    while true; do
        clear
        echo "Welcome:"
        echo "1) Login"
        echo "2) Register"
        echo "3) Enter as a guest"
        echo "4) Exit"

        clear_buffer
        read -r -s -n 1 choice
        clear

        case "$choice" in
        1)
            login_func "user"
            sleep 2
            ;;
        2)
            register_func "user"
            sleep 2
            ;;
        3)  db_menu ;;
        4)
            echo "Goodbye!"
            sleep 2
            exit 0
            ;;
        *)
            echo "Invalid choice, please try again."
            sleep 2
            ;;
        esac
    done
}
